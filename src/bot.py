# src/bot.py
import os
import json
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, ConversationHandler
from sentence_transformers import SentenceTransformer
import faiss
import numpy as np
from dotenv import load_dotenv # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") # <-- –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
MODEL_NAME = 'intfloat/multilingual-e5-large' # –•–æ—Ä–æ—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
FAISS_INDEX_PATH = 'models/faiss_index.bin'
CHUNKS_PATH = 'models/chunks.json'
DATA_FILE_PATH = 'data/programs_data.json'

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞ ---
model = None
index = None
chunks = None

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ---
BACKGROUND, INTERESTS, CAREER = range(3)

# --- –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º ---
START_MESSAGE = (
    "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä –ò–¢–ú–û –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º AI.\n\n"
    "–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö:\n"
    "üîπ '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'\n"
    "üîπ 'AI –∏ ML –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö'\n\n"
    "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å!\n\n"
    "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç–µ–±–µ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç? –ù–∞–ø–∏—à–∏ /recommend."
)

RECOMMEND_START_MESSAGE = (
    "–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
    "1Ô∏è‚É£ –ö–∞–∫–æ–π —É —Ç–µ–±—è –±—ç–∫–≥—Ä–∞—É–Ω–¥? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, —ç–∫–æ–Ω–æ–º–∏–∫–∞)"
)
RECOMMEND_INTERESTS_MESSAGE = "2Ô∏è‚É£ –ö–∞–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ò–ò —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, Computer Vision, NLP, Reinforcement Learning, Data Engineering, AI Product)"
RECOMMEND_CAREER_MESSAGE = "3Ô∏è‚É£ –ö–∞–∫—É—é –∫–∞—Ä—å–µ—Ä—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, ML Engineer, Data Scientist, AI Product Manager, Data Analyst)"
RECOMMEND_RESULT_MESSAGE = (
    "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n"
    "- –ë—ç–∫–≥—Ä–∞—É–Ω–¥: {background}\n"
    "- –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}\n"
    "- –ö–∞—Ä—å–µ—Ä–Ω–∞—è —Ü–µ–ª—å: {career_goal}\n\n"
    "üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommended_program}\n"
    "üìå –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
    "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ!"
)
RECOMMEND_CANCEL_MESSAGE = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö."
NOT_RELEVANT_MESSAGE = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞—Ö –ò–¢–ú–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' –∏–ª–∏ 'AI –∏ ML –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö'."
ERROR_MESSAGE = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
NO_DATA_MESSAGE = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
BOT_READY_MESSAGE = "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await context.bot.send_message(chat_id=update.effective_chat.id, text=START_MESSAGE)

# --- –õ–æ–≥–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ---
async def recommend_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    await update.message.reply_text(RECOMMEND_START_MESSAGE)
    return BACKGROUND

async def recommend_background(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –±—ç–∫–≥—Ä–∞—É–Ω–¥."""
    context.user_data['background'] = update.message.text
    await update.message.reply_text(RECOMMEND_INTERESTS_MESSAGE)
    return INTERESTS

async def recommend_interests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã."""
    context.user_data['interests'] = update.message.text
    await update.message.reply_text(RECOMMEND_CAREER_MESSAGE)
    return CAREER

async def recommend_career(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—å–µ—Ä–Ω—É—é —Ü–µ–ª—å –∏ –≤—ã–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é."""
    context.user_data['career_goal'] = update.message.text
    
    background = context.user_data.get('background', '').lower()
    interests = context.user_data.get('interests', '').lower()
    career_goal = context.user_data.get('career_goal', '').lower()

    # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    ai_keywords = ['ml engineer', 'data engineer', 'data scientist', 'computer vision', 'nlp', 'reinforcement learning', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏', '–∞–ª–≥–æ—Ä–∏—Ç–º—ã', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
    ai_product_keywords = ['product manager', 'ai product', 'product', '–±–∏–∑–Ω–µ—Å', '–∞–Ω–∞–ª–∏—Ç–∏–∫', 'data analyst', '—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏']

    ai_score = sum(1 for keyword in ai_keywords if keyword in interests or keyword in career_goal or keyword in background)
    ai_product_score = sum(1 for keyword in ai_product_keywords if keyword in interests or keyword in career_goal or keyword in background)

    if ai_score > ai_product_score:
        recommended_program = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
        reason = "—Ç–∞–∫ –∫–∞–∫ —Ç—ã —É–ø–æ–º—è–Ω—É–ª —Ä–æ–ª–∏ –∏–ª–∏ –æ–±–ª–∞—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏ –∏–Ω–∂–µ–Ω–µ—Ä–∏–µ–π –ò–ò (ML Engineer, Data Engineer, Computer Vision –∏ —Ç.–¥.)."
    elif ai_product_score > ai_score:
        recommended_program = "AI –∏ ML –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö"
        reason = "—Ç–∞–∫ –∫–∞–∫ —Ç—ã —É–ø–æ–º—è–Ω—É–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º, –±–∏–∑–Ω–µ—Å—É –∏–ª–∏ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö (AI Product Manager, Data Analyst –∏ —Ç.–¥.)."
    else:
        # –ï—Å–ª–∏ —Å—á–µ—Ç —Ä–∞–≤–Ω—ã–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π, –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–µ –∏–ª–∏ –æ–¥–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        recommended_program = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
        reason = "—Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏–º–µ–µ—Ç –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –æ—Ö–≤–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–æ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò."

    final_message = RECOMMEND_RESULT_MESSAGE.format(
        background=context.user_data['background'],
        interests=context.user_data['interests'],
        career_goal=context.user_data['career_goal'],
        recommended_program=recommended_program,
        reason=reason
    )
    
    await update.message.reply_text(final_message)
    return ConversationHandler.END

async def recommend_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    await update.message.reply_text(RECOMMEND_CANCEL_MESSAGE)
    return ConversationHandler.END

# --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_question = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.first_name}: {user_question}")

    if not model or not index or not chunks:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=NO_DATA_MESSAGE)
        return

    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –≤–æ–ø—Ä–æ—Å–∞
        question_embedding = model.encode([user_question])
        question_embedding = np.array(question_embedding).astype('float32')

        # 2. –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —á–∞–Ω–∫–æ–≤
        k = 3
        distances, indices = index.search(question_embedding, k)
        
        # 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        relevant_chunks = []
        for i, idx in enumerate(indices[0]):
            if distances[0][i] < 100: # –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥
                 relevant_chunks.append(chunks[idx])

        if not relevant_chunks:
             await context.bot.send_message(chat_id=update.effective_chat.id, text=NOT_RELEVANT_MESSAGE)
             return

        # 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ –±–µ–∑ –≤–Ω–µ—à–Ω–µ–π LLM, —Å–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        answer_parts = ["–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–º –ø–æ–ª–µ–∑–Ω–∞:\n"]
        for chunk in relevant_chunks:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —á–∏—Ç–∞–µ–º—ã–º
            source_info = f"üîπ –ò—Å—Ç–æ—á–Ω–∏–∫: {chunk['source']}"
            if chunk['field'] == 'about':
                answer_parts.append(f"{source_info}\nüìÑ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ: {chunk['text']}\n")
            elif chunk['field'] == 'career':
                answer_parts.append(f"{source_info}\nüíº –ö–∞—Ä—å–µ—Ä–∞: {chunk['text']}\n")
            elif chunk['field'] == 'directions':
                answer_parts.append(f"{source_info}\nüß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {chunk['text']}\n")
            elif chunk['field'] == 'scholarships':
                answer_parts.append(f"{source_info}\nüí∞ –°—Ç–∏–ø–µ–Ω–¥–∏–∏: {chunk['text']}\n")
            elif chunk['field'] == 'international':
                answer_parts.append(f"{source_info}\nüåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {chunk['text']}\n")
            elif chunk['field'] == 'companies':
                 answer_parts.append(f"{source_info}\nüè¢ –ö–æ–º–ø–∞–Ω–∏–∏: {chunk['text']}\n")
            else:
                answer_parts.append(f"{source_info}\nüìù {chunk['text']}\n")
        
        answer = "\n".join(answer_parts)
        
        await context.bot.send_message(chat_id=update.effective_chat.id, text=answer)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=ERROR_MESSAGE)

async def post_init(application: ApplicationBuilder) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞."""
    global model, index, chunks
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ SentenceTransformer...")
    model = SentenceTransformer(MODEL_NAME)
    logger.info("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ FAISS –∏–Ω–¥–µ–∫—Å–∞ –∏ —á–∞–Ω–∫–æ–≤...")
    if os.path.exists(FAISS_INDEX_PATH) and os.path.exists(CHUNKS_PATH):
        index = faiss.read_index(FAISS_INDEX_PATH)
        with open(CHUNKS_PATH, 'r', encoding='utf-8') as f:
            chunks = json.load(f)
        logger.info("FAISS –∏–Ω–¥–µ–∫—Å –∏ —á–∞–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        logger.info(BOT_READY_MESSAGE)
    else:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ data_processor.py")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).post_init(post_init).build()

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    app.add_handler(CommandHandler("start", start))
    
    # ConversationHandler –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('recommend', recommend_start)],
        states={
            BACKGROUND: [MessageHandler(filters.TEXT & ~filters.COMMAND, recommend_background)],
            INTERESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, recommend_interests)],
            CAREER: [MessageHandler(filters.TEXT & ~filters.COMMAND, recommend_career)],
        },
        fallbacks=[CommandHandler('cancel', recommend_cancel)],
    )
    app.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == '__main__':
    main()